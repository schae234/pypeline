#!/usr/bin/python -3
#
# Copyright (c) 2012 Mikkel Schubert <MSchubert@snm.ku.dk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
from __future__ import print_function
from __future__ import with_statement

import sys
import itertools
from collections import defaultdict, namedtuple
from optparse import OptionParser

import pysam

import pypeline.common.vcfwrap as vcfwrap
import pypeline.common.text as text
import pypeline.common.sequences as sequences
import pypeline.common.formats.fasta as fasta



def build_region(options, genotype, bed):
    # Note that bed.end is a past-the-end coordinate
    start  = max(0, bed.start - options.padding)
    end    = bed.end + options.padding

    filtered_vcfs = []
    if bed.contig in genotype.contigs:
        # This raises a ValueError if the VCF does not
        # contain any entries for the specified contig.
        for vcf in genotype.fetch(bed.contig, start, end, parser = pysam.asVCF()):
            if (vcf.filter == "PASS"):
                filtered_vcfs.append(vcf)

    sequence = ["N"] * (end - start)
    for snp in filtered_vcfs:
        if not vcfwrap.is_indel(snp):
            if snp.alt != ".":
                genotype = "".join(vcfwrap.get_ml_phenotype(snp))
                encoded  = sequences.encode_genotype(genotype)
            else:
                encoded = snp.ref

            sequence[snp.pos - start] = encoded

    if not options.ignore_indels:
        for indel in filtered_vcfs:
            if (indel.alt == ".") or not vcfwrap.is_indel(indel):
                continue

            genotype = vcfwrap.get_ml_phenotype(indel)
            if (genotype[0] != genotype[1]):
                # No way to represent heterozygous indels
                continue

            # FIXME: parse_indel only supports a single 'alt' values
            indel.alt = genotype[0]
            indel = vcfwrap.parse_indel(indel)
            if indel.in_reference:
                del_start = max(indel.pos + 1, bed.start)
                del_end   = min(indel.pos + 1 + len(indel.what), bed.end)

                if del_start >= del_end:
                    continue # Deletion does not cover any bases of interest
                elif options.whole_codon_indels_only and ((del_end - del_start) % 3):
                    continue # Non-codon sized overlap with area of interest

                for position in range(del_start, del_end):
                    sequence[position - start] = ""
            elif (len(indel.what) % 3 == 0) or not options.whole_codon_indels_only:
                sequence[indel.pos - start] += indel.what

    offset    = bed.start - start
    length    = bed.end - bed.start
    truncated = sequence[offset : offset + length]

    # Discard insertions after the last position
    truncated[-1] = truncated[-1][:1]

    return truncated


def build_genes(options, genotype, regions):
    def keyfunc(bed):
        return (bed.contig, bed.name, bed.start)
    regions.sort(key = keyfunc)

    for (gene, beds) in itertools.groupby(regions, lambda x: x.name):
        sequence, beds = [], tuple(beds)
        for bed in beds:
            sequence.extend(build_region(options, genotype, bed))
        sequence = "".join(sequence)

        if any((bed.strand == "-") for bed in beds):
            assert all((bed.strand == "-") for bed in beds)

            sequence = sequences.reverse_complement(sequence)

        yield (gene, sequence)


BEDTuple = namedtuple("BEDTuple", ("contig", "start", "end", "name", "score", "strand"))
def read_intervals(filename):
    with open(filename) as bed_file:
        intervals = text.parse_lines_by_contig(bed_file, pysam.asBed())

        for (key, beds) in intervals.iteritems():
            bed_tuples = []
            for bed in beds:
                nfields = len(bed)
                if nfields < 6:
                    sys.stderr.write("ERROR: Invalid BED record '%s', must have at least 6 fields ...\n" \
                                     % ("\\t".join(bed),))
                    return None

                # Transform to a named tuple, as Pysam has a tendency to segfault
                # (rather than throwing exceptions), if you do anything wrong
                bed = list(bed)[:6]  # BED6 only
                bed[1] = int(bed[1]) # start
                bed[2] = int(bed[2]) # end
                bed[4] = int(bed[4]) # score

                bed_tuples.append(BEDTuple(*bed))
            intervals[key] = bed_tuples

    return intervals


def main(argv, output = sys.stdout):
    parser = OptionParser()
    parser.add_option("--genotype", help="Tabix indexed VCF file.")
    parser.add_option("--intervals", help="BED file.")
    parser.add_option("--padding", type = int, default = 10,
                      help = "Number of bases to expand intervals, when checking for adjacent indels [%default]")
    parser.add_option("--whole-codon-indels-only", action="store_true", default = False,
                      help = "If true, only indels where (length % 3) == 0 are retained [%default]")
    parser.add_option("--ignore-indels", action = "store_true", default = False,
                      help = "Do not include indels generated FASTA sequence [%default].")

    (opts, args) = parser.parse_args(argv)
    if args:
        parser.print_help()
        return 1
    elif not (opts.genotype and opts.intervals):
        sys.stderr.write("ERROR: Genotype and intervals must be set.\n")
        parser.print_help()
        return 1

    print("Running buildRegions.py", end = "", file = sys.stderr)
    if opts.whole_codon_indels_only:
        print(", assuming sequences represents CDS", end = "", file = sys.stderr)
    print(" ...", file = sys.stderr)

    genotype = pysam.Tabixfile(opts.genotype)
    intervals = read_intervals(opts.intervals)
    if intervals is None:
        return 1

    for (_, beds) in sorted(intervals.items()):
        for (name, sequence) in build_genes(opts, genotype, beds):
            fasta.print_fasta(name, sequence, file = output)

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
