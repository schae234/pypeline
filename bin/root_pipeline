#!/usr/bin/python
#
# Copyright (c) 2012 Mikkel Schubert <MSchubert@snm.ku.dk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
# SOFTWARE.
#
import os
import sys


# List of modules required to run the pipeline
_REQUIRED_MODULES = {"pysam" : "http://code.google.com/p/pysam/", 
                     "yaml"  : "http://www.pyyaml.org/"}


def _has_required_modules():
    missing_modules = False
    try:
        import pypeline.ui as ui
    except ImportError, e:
        sys.stderr.write("ERROR: Could not import required Pypeline module pypeline.ui:\n\t- %s\n" % (e,))
        sys.stderr.write("       Please make sure that PYTHONPATH points to the location of the 'pypeline' module.\n")
        sys.stderr.write("       This may be done permanently by adding the following to your ~/.bashrc file:\n")
        sys.stderr.write("         export PYTHONPATH=${PYTHONPATH}:/path/to/pypeline/checkout/...\n\n")
        missing_modules = True

    for (module, url) in sorted(_REQUIRED_MODULES.items()):
        try:
            __import__(module)
        except ImportError, e:
            sys.stderr.write("ERROR: Could not import required module '%s':\n\t- %s\n" % (module,e))
            sys.stderr.write("       If module is not installed, please download from '%s'.\n" % (url,))
            sys.stderr.write("       A local install may be performed using the following command:\n")
            sys.stderr.write("       $ python setup.py install --user\n\n")
            missing_modules = True

    return not missing_modules


def print_usage():
    import pypeline.ui as ui
    basename = os.path.basename(sys.argv[0])
    ui.print_info("Usage:")
    ui.print_info("  -- %s help            -- Display this message" % basename)
    ui.print_info("  -- %s mkfile [...]    -- ." % basename)


def _select_command(commands, command):
    command = command.strip().lower()
    if command in commands:
        return command, commands[command]
    elif len(command) < 3:
        return None, None

    for (key, value) in commands.iteritems():
        if key.startswith(command):
            return (key, value)

    return None, None


def main(argv):
    # Import Root_pipeline specific parts
    import pypeline.ui as ui
    import pypeline.tools.root_pipeline.parts.common as common 
    import pypeline.tools.root_pipeline.makefile as makefile
    from pypeline.tools.root_pipeline.Root import RootNode

    # Import the Pypeline
    from pypeline import Pypeline

    # sanity check
    if not _has_required_modules():
        return 1
    if (len(argv) == 0):
        print_usage()
        return 1

    # available Root Pipeline commands
    commands = {
        "mkfile" : makefile.default,                         # does nothing right now 
        "run" : RootNode.chain,                              # returns a Root node
    }

    # pop off the pipeline command
    command, options, optargs = common.parse_options(argv)

    # Populate nodes and give them to the pipeline
    nodes = []
    nodes.append(commands[command](options, optargs))
    ui.print_info("RootPipeline %s: ..." % (command), file = sys.stderr)

    # Create a new pypeline and add appropriate nodes
    pipeline = Pypeline(options)
    pipeline.add_nodes(nodes)

    if not pipeline.run(max_running = options.max_threads,
                        dry_run     = options.dry_run,
                        verbose     = options.verbose,
                        collapse    = options.expand_nodes):
        return 1
    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
