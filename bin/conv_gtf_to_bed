#!/usr/bin/python -3
#
# Copyright (c) 2012 Mikkel Schubert <MSchubert@snm.ku.dk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
# SOFTWARE.
#
#
# Converts a GTF file to a set of BED6 files, one for each
# feature in the GTF file (CDS, Exon, ...). Also generates a list
# of introns, and UTRs based on sequences in the GTF.
#
from __future__ import with_statement
from __future__ import print_function

import sys
import string
import collections

import pysam

from pypeline.common.utilities import set_in, get_in
import pypeline.common.text as text


################################################################################
################################################################################
## Functions used for GTF parsing and filtering

def filter_GTF_record(gtf):
    return gtf.feature not in ("exon", "CDS")


def update_GTF_table(table, gtf, scaffolds):
    keys = (gtf.source,
            gtf.gene_id,
            gtf.transcript_id,
            int(gtf.exon_number),
            gtf.feature)

    record = {"contig"  : "chr" + gtf.contig,
              "start"   : gtf.start,
              # In pysam, 'end' equals the past-the-end position
              "end"     : gtf.end - 1,
              "strand"  : gtf.strand,
              "feature" : gtf.feature,
              "transcript" : gtf.transcript_id} # REMOVE?

    if record["contig"] in scaffolds:
        contig = scaffolds[record["contig"]]
        record["contig"] = contig["chrom"]
        record["start"] += int(contig["chromStart"])
        record["end"]   += int(contig["chromStart"])

    assert not get_in(table, keys), keys
    set_in(table, keys, record)


def read_GTF(lines, scaffolds):
    table = {} # gene_id -> transcript_id -> exon_number -> feature -> [items]
    for gtf in text.parse_lines(lines, pysam.asGTF()):
        if not filter_GTF_record(gtf):
            update_GTF_table(table, gtf, scaffolds)

    return table


def read_scaffolds(filename):
    scaffolds = {}
    with open(filename) as handle:
        header = handle.readline().strip("#\n\r").split("\t")
        for line in handle:
            row = dict(zip(header, line.rstrip("\r\n").split("\t")))
            scaffolds[row["contig"]] = row
    return scaffolds


################################################################################
################################################################################
##

def get_introns(exons):
    lst = [exons[n]["exon"] for n in sorted(exons)]
    if lst[0]["strand"] == "-":
        # Exon numbers follow the read direction, and the coordinates are
        # therefore descending for regions on the negative strand. Below we
        # assume that the coordinates are ascending, so reorder the list.
        lst = lst[::-1]

    introns = []
    for (a, b) in zip(lst, lst[1:]):
        if a["end"] == b["start"] - 1:
            # Intron has been lost?
            continue

        record = dict(a)
        record.update(feature = "intron",
                      start   = a["end"] + 1,
                      end     = b["start"] - 1)
        assert record["start"] <= record["end"], lst

        introns.append(record)

    return introns


def split_exon(exon, cds):
    """Takes an exon and a CDS, and returns a map of regions for each
       feature (UTR5/3, CDS) that may be inferred from the arguments.
       Note that the CDS is simply returned as is, to simplify
       downstream handling of these features."""
    results = [cds]

    if (exon["start"] < cds["start"]):
        utr = dict(exon)
        utr.update(end = cds["start"] - 1,
                   feature = (exon["strand"] == "+" and "UTR5" or "UTR3"))
        results.append(utr)

    if (exon["end"] > cds["end"]):
        utr = dict(exon)
        utr.update(start = cds["end"] + 1,
                   feature = (exon["strand"] == "+" and "UTR3" or "UTR5"))
        results.append(utr)

    return results


def split_exons(exons, func):
    # By looping over the list sorted by exon-number, we can easily
    # determine whether or not we are dealing with a 5' or 3' UTR.
    seen_CDS = False
    for (_, exon) in sorted(exons.iteritems()):
        if "CDS" in exon:
            seen_CDS = True
            cds, exon = exon["CDS"], exon["exon"]

            func(split_exon(exon, cds))
        else:
            utr = dict(exon["exon"])
            utr.update(feature = (seen_CDS and "UTR3" or "UTR5"))

            func([utr])


def select_transcript(transcripts):
    """Returns the transcript with the greatest number of exons."""
    def transcript_len(transcript):
        total_len = 0
        for exon in transcript.itervalues():
            exon = exon["exon"]
            total_len += exon["end"] - exon["start"] + 1
        return total_len
    if len(transcripts) == 1:
        return transcripts.values()[0]

    return max(transcripts.values(), key = transcript_len)


def build_feature_table_for_coding_seqs(table):
    """Takes a table generated from a GTF file, and constructs a table for each
       feature, inferring introns and UTRs from the exons and CDSs of the input
       table."""

    print("Building table of features for coding sequences ...")
    features = {
        "UTR5" : [],
        "UTR3" : [],
        "CDS" : [],
        "intron" : [] }

    filtered = read = 0
    for (gene, transcripts) in table.iteritems():
        # Select a single transcript ...
        exons = select_transcript(transcripts)

        read += len(transcripts)
        filtered += len(transcripts) - 1

        # TODO: Validate exons (1 ... N), no jumps ...
        #       CDS must == exon in exons 2 ... N - 1
        # validate_exons(exons)

        def add_records(records):
            for record in records:
                features[record["feature"]].append(record)

        split_exons(exons, add_records)
        add_records(get_introns(exons))

    print("\t- Processed %i transcripts, filtered %i (%.1f%%) ..." \
              % (read, filtered, 100.0 * filtered / read))
    return features


def build_feature_table_for_noncoding_seqs(table):
    print("Building table of features for non-coding sequences ...")
    features = { "exon" : [], "intron" : [] }

    filtered = read = 0
    for (gene, transcripts) in table.iteritems():
        # Select a single transcript ...
        exons = select_transcript(transcripts)

        read += len(transcripts)
        filtered += len(transcripts) - 1

        # TODO: Validate exons (1 ... N), no jumps ...
        #       CDS must == exon in exons 2 ... N - 1
        # validate_exons(exons)

        def add_records(records):
            for record in records:
                features[record["feature"]].append(record)

        add_records(record["exon"] for record in exons.itervalues())
        add_records(get_introns(exons))

    print("\t- Processed %i transcripts, filtered %i (%.1f%%) ..." \
              % (read, filtered, 100.0 * filtered / read))
    return features


def write_bed(table, target):
    def sort_key(record):
        return (record["contig"], record["start"], record["end"])

    with open(target, "w") as out:
        for record in sorted(table, key = sort_key):
            out.write("%s\t%i\t%i\t%s\t%i\t%s\n" %
                      # As described on http://genome.ucsc.edu/FAQ/FAQformat
                      (record["contig"],                 # chrom
                       record["start"],                  # chromStart
                       record["end"] + 1,                # chromEnd, past-the-end
                       record["transcript"],             # name
                       0,                                # score
                       record["strand"])) # strand




################################################################################
################################################################################
## Main function

def main(argv):
    if not (2 <= len(argv) <= 3):
        print("Usage: %s <input.gtf> <output-prefix> [scaffolds.txt]" % sys.argv[0])
        return 1

    scaffolds = {}
    if len(argv) == 3:
        scaffolds = read_scaffolds(argv[2])

    INPUT, PREFIX = argv[:2]
    with open(INPUT, "r") as gtf_file:
        src_table = read_GTF(gtf_file, scaffolds)

    for (source, table) in src_table.iteritems():
        print("Writing tables for '%s' ..." % source)

        if source.startswith("protein"):
            features = build_feature_table_for_coding_seqs(table)
        else:
            features = build_feature_table_for_noncoding_seqs(table)

        for feature in features:
            fpath = "%s.%s.%s.bed" % (PREFIX, source, feature)

            print("\tWriting %ss to '%s' ..." % (feature, fpath, ))
            write_bed(features[feature], fpath)

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
