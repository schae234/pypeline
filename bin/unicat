#!/usr/bin/python
#
# Copyright (c) 2012 Mikkel Schubert <MSchubert@snm.ku.dk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
"""
An alternative to 'samtools view -Sb -', needed because samtools does not
properly handle SAM-files with no records. For example, the following
command will not work:
$ samtools view -H INPUT | samtools view -Sb -
"""

import sys
import optparse
import subprocess


def select_cat(filename):
    with open(filename) as source:
        header = source.read(2)
        if header == "\x1f\x8b":
            return "zcat"
        elif header == "BZ":
            return "bzcat"

        return "cat"


def call(input_files, output_file):
    executable = select_cat(input_files[0])
    command = [executable] + input_files

    if not output_file:
        return subprocess.Popen(command, close_fds = True).wait()


    with open(output_file, "w") as output:
        proc = subprocess.Popen(command,
                                stdout    = output,
                                close_fds = True)
        return proc.wait()


def main(argv):
    parser = optparse.OptionParser("%prog [OPTION] <FILE_1> [<FILE_2> ...]")
    parser.add_option("--output")

    config, args = parser.parse_args(argv)
    if not args:
        parser.print_usage(sys.stderr)
        sys.stderr.write("ERROR: At least one input file must be specified\n")
        return 1

    return call(input_files   = args,
                output_file   = config.output)


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
