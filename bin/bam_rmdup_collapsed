#!/usr/bin/env python

"""
Stripped down version of 'FilterUniqueBAM' by
:Author: Martin Kircher
:Contact: Martin.Kircher@eva.mpg.de
:Date: *08.10.2011
:Type: tool
:Input: BAM
:Output: BAM

Mark/Filter PCR duplicates for merged PE reads Reads BAM
from STDIN and writes BAM to STDOUT. All non-collapsed reads
as well as secondary/chinermic alignments, reads that have
failed QC and unmmaped reads, are written to STDOUT as is.

The input is assumed to be sorted by coordinates, and this
order is preservered, though individual reads at the same
position may be re-arranged).
"""

import sys
import pysam
from optparse import OptionParser


def calc_consensus(reads):
  count = len(reads)
  outread = None
  maxsumqual = 0
  for read in reads:
    nsum = sum(map(ord,read.qual))
    if nsum  > maxsumqual:
      outread = read
      maxsumqual = nsum
    for key,value in read.tags: # LOOK FOR PREVIOUS PCR DUPLICATE COUNTS
      if key == "XP": count += value

  if outread.tags == None: outread.tags = [("XP",count)]
  else: outread.tags = outread.tags+[("XP",count)]

  return outread


def get_consensus_SR(reads):
  # DETERMINE MOST FREQUENT CIGAR LINE
  by_cigar = {}
  cigar_count = {}
  for read in reads:
    tcigar = tuple(read.cigar)
    if tcigar in by_cigar:
      cigar_count[tcigar]+=1
      by_cigar[tcigar].append(read)
    else:
      cigar_count[tcigar]=1
      by_cigar[tcigar]=[read]
  to_sort = map(lambda (x,y): (y,-len(str(x)),x),cigar_count.iteritems())
  to_sort.sort()
  selcigar = to_sort[-1][-1]
  reads = by_cigar[selcigar]
  return calc_consensus(reads)


def write_consensus_SR(outfile, reads, remove_duplicates):
  consensus = get_consensus_SR(reads)
  for read in reads:
    read.is_duplicate = (read is not consensus)
    if not (read.is_duplicate and remove_duplicates):
      outfile.write(read)


def _flush_buffer(outfile, curvariants, remove_duplicates):
    for (key, value) in curvariants.iteritems():
        write_consensus_SR(outfile, value[0], remove_duplicates)
    curvariants.clear()



_FILTERED_FLAGS  = 0x1   # PE reads
_FILTERED_FLAGS |= 0x4   # Unmapped
_FILTERED_FLAGS |= 0x100 # Secondary alignment
_FILTERED_FLAGS |= 0x200 # Failed QC
_FILTERED_FLAGS |= 0x800 # Chimeric alignment


def main(argv):
  parser = OptionParser("%prog [options] BAMfile")
  parser.add_option("--remove-duplicates", help="Remove duplicates from output",default=False,action="store_true")
  (options, args) = parser.parse_args(argv)

  with pysam.Samfile("-", "rb") as infile:
    with pysam.Samfile("-", "wb", template = infile) as outfile:
      curpos = None
      curvariants = {}
      for read in infile:
        if curpos and ((read.tid, read.pos) != curpos):
          _flush_buffer(outfile, curvariants, options.remove_duplicates)
          curpos = None

        if (read.qual is None) or (read.flag & _FILTERED_FLAGS) or not read.qname.startswith("M_"):
          outfile.write(read)
          continue

        curpos = (read.tid, read.pos)
        strand = read.is_reverse
        outpos = curpos[1]

        nkey = (strand, outpos, read.alen)
        if nkey in curvariants:
          curvariants[nkey][0].append(read)
          curvariants[nkey][1] +=1
        else:
          curvariants[nkey] = [[read],1]

      _flush_buffer(outfile, curvariants, options.remove_duplicates)

  return 0


if __name__ == '__main__':
  sys.exit(main(sys.argv[1:]))
